#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/input_transform.h>

#define DEFAULT_CPI 1000        // トラックボールの感度
#define ROTATION_ANGLE 30       // トラックボールのY軸を回転
#define CLIPPER_THRESHOLD 30    // スクロール時に斜めの値をクリップ
#define INVERT_X 1              // スクロールの反転
#define INVERT_Y 0              // スクロールの反転
#define SCROLL_LAYER 2         // スクロールを有効にするレイヤー

#define POLL_PERIOD_MS 30       // キースキャンのポーリング周期（ms）
#define DEBOUNCE_MS 10          // デバウンス時間 (ms)


&spi0 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    cs-gpios = <&gpio0 28 GPIO_ACTIVE_LOW>; // NCS: P0.28

    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";

    trackball: pmw3610@0 {
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio0 02 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>; // MOTION: P0.29
        cpi = <DEFAULT_CPI>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        force-awake;
        //force-awake-4ms-mode;
        status = "okay";
    };
};

&pinctrl {
    spi0_default: spi0_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 03)>,   // SCLK:  P0.03
                    <NRF_PSEL(SPIM_MOSI, 0, 02)>,  // SDIO:  P0.02
                    <NRF_PSEL(SPIM_MISO, 0, 02)>;  // MISOはSDIOと同じ
        };
    };

    spi0_sleep: spi0_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 0, 03)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 02)>,
                    <NRF_PSEL(SPIM_MISO, 0, 02)>;
            low-power-enable;
        };
    };
};

/ {
	chosen {
		zmk,kscan = &kscan0;
		zmk,matrix_transform = &default_transform;
	};

	default_transform: keymap_transform_0 {
		compatible = "zmk,matrix-transform";
		columns = <4>;
		rows = <1>;
		map = <
			RC(0,0)  RC(0,1)
			RC(0,2)  RC(0,3)
		>;
	};


	kscan0: kscan {
		compatible = "zmk,kscan-gpio-direct";
		label = "KSCAN";
		input-gpios =
			<&xiao_d  5 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,
			<&xiao_d  6 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,
			<&xiao_d  7 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,
			<&xiao_d  8 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>,
		;
	};

    xy_transf: xy_transf {
        compatible = "zmk,input-processor-transform";
        #input-processor-cells = <1>;
        type = <INPUT_EV_REL>;
        x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
        y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
    };

    xy_scaler: xy_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_X>, <INPUT_REL_Y>;
        track-remainders;
    };

    x_scaler: x_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_X>;
    };

    to_wheel: to_wheel {
        compatible = "zmk,input-processor-code-mapper";
        #input-processor-cells = <0>;
        type = <INPUT_EV_REL>;
        map = <INPUT_REL_X INPUT_REL_HWHEEL>,
              <INPUT_REL_Y INPUT_REL_WHEEL>;
    };

    sensor_rotation: sensor_rotation {
        compatible = "zmk,input-processor-sensor-rotation";
        #input-processor-cells = <0>;
        rotation-angle = <ROTATION_ANGLE>;
    };

    xy_clipper: xy_clipper {
        compatible = "zmk,input-processor-xy-clipper";
        #input-processor-cells = <0>;
        threshold = <CLIPPER_THRESHOLD>;
        invert-x = <INVERT_X>;
        invert-y = <INVERT_Y>;
    };

    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors = <&sensor_rotation>;
        scroll {
            layers = <SCROLL_LAYER>;
            input-processors = <&sensor_rotation>,
                               <&xy_clipper>,
                               <&to_wheel>;
        };
    };
};
